[
  {
    "path": "posts/2022-12-23-mizer-240/",
    "title": "Mizer 2.4.0",
    "description": "Celebrating Christmas with a new mizer release that makes building \nrealistic multispecies models even simpler.",
    "author": [
      {
        "name": "Gustav Delius",
        "url": {}
      }
    ],
    "date": "2022-12-23",
    "categories": [],
    "contents": "\r\n\r\nContents\r\nAvoid confusion between maximum size and von Bertalanffy asymptotic size\r\nSeparate tuning of steady state and tuning of dynamics\r\nsetResource()\r\nmatchGrowth()\r\n\r\nIn time for Christmas I have a new mizer release for you. The new mizer version brings you three big changes and many small improvements.\r\n\r\nThe new version is already on CRAN, so you can update your installation with\r\n\r\n\r\ninstall.packages(\"mizer\")\r\n\r\n\r\nHowever it may take a few days until binaries are available for all platforms, so if you are not set up to compile R packages from source you may want to try the above again after Christmas.\r\nAfter you have updated to mizer 2.4.0 you will also want to update the mizerExperimental package with\r\n\r\n\r\nremotes::install_github(\"sizespectrum/mizerExperimental\")\r\n\r\n\r\nThis release introduces a change that requires you to upgrade your old MizerParams and MizerSim objects with upgradeParams() or upgradeSim(). Let’s assume that you have an existing MizerParams object named params. Then to use it with the new version of mizer you would do\r\n\r\n\r\nparams <- upgradeParams(params)\r\n\r\n\r\nSimilarly, if you have a MizerSim object called sim you would do\r\n\r\n\r\nsim <- upgradeSim(sim)\r\n\r\n\r\nNothing bad will happen if you forget to do this, but mizer will keep reminding you. Also, you need to\r\nI’ll now discuss the three big changes. You can always see the smaller changes in the Changelog on the mizer website.\r\nAvoid confusion between maximum size and von Bertalanffy asymptotic size\r\nAs I explained in the previous blog post Don’t use von Bertalanffy growth parameters, in the past mizer confused the von Bertalanffy growth curve and the mizer growth curve, even though they are very different things. In particular, the mizer documentation advised you to use the asymptotic size parameter of the von Bertalanffy curve as the size at which a species invests 100% of its income into reproduction. The new version finally fixes this.\r\nThe species parameter that specifies the size at which also the largest fish stop growing is renamed from w_inf to w_max. The parameter w_inf is now reserved for the von Bertalanffy asymptotic size parameter. If you upgrade your existing MizerParams object with upgradeParams() the w_inf column is copied over to the w_max column automatically, but you may want to change the values yourself if they do not currently reflect the maximum size of the species. Otherwise the size distributions predicted by mizer will not match observations.\r\nSeparate tuning of steady state and tuning of dynamics\r\nAlready mizer 2.0 introduced the idea that building a new mizer model should be done in two stages. In the first stage one adjusts the species parameters so that the model has steady state spectra and steady state yields that roughly agree with averaged observations. Only in the second stage one adjusts the density dependence in the model, i.e., one tunes the sensitivity of the model to changes. This separation between these two stages is similar to the separation between Ecopath and Ecosim.\r\nThere are three tunable sources of density dependence in mizer:\r\nThe reproduction level. This is the ratio between the actual rate of reproduction and the maximal rate of reproduction R_max. The higher the reproduction level, the less sensitive the species is to changes in its spawning stock biomass.\r\nThe resource level. This is the ratio between the actual resource abundance and the resource carrying capacity. The higher the resource level the less sensitive the model is to competition among the larvae of the fish species for the limited resource.\r\nThe feeding level. This is the ration between the rate at which individuals take in food and their maximum intake rate. The higher the feeding level, the less sensitive a species is to competition for prey. We’ll discuss this below when we talk about growth rates.\r\nIdeally one would like to be able to tune each of these in the second stage of model calibration without spoiling the steady state calibration from the first stage of the process. Mizer 2.0 already introduced the setBevertonHolt() function that allows one to tune the reproduction level without changing the steady state. Now in mizer 2.4 the setResource() function allows you to also tune the resource level without changing the steady state. While you still can’t change the feeding level without changing the steady state, at least the new matchGrowth() function allows you to keep reasonable growth rates after changing the feeding level.\r\nsetResource()\r\nWhile tuning the steady state using the steady() function the resource abundance is now being kept fixed at the chosen value. Then, once the steady state is to your satisfaction, you can turn on the resource dynamics with setResource() without changing the steady state.\r\nLer’s assume we are happy with the steady state of the NS_params model that comes with mizer (there are many reasons not to be happy with it yet and mizer 2.5 whould definitely ship with a better example model, but let’s ignore that for now).\r\n\r\n\r\nparams <- steady(NS_params, tol = 1e-10)\r\nplotlySpectra(params, power = 2)\r\n\r\n\r\n\r\nThen\r\n\r\n\r\nparams2 <- setResource(params, resource_level = 0.5)\r\n\r\n\r\nwill set the carrying capacity to twice the resource abundance at all sizes and at the same time it will set the resource replenishment rate so that the replenishment balances the consumption of the resource.\r\nLet us verify that in spite of changing the resource level we are still at steady state:\r\n\r\n\r\nsim2 <- project(params2, t_max = 10)\r\nplotlyBiomass(sim2)\r\n\r\n\r\n\r\nSo, given that changing the resource level does not actually change any abundances and leaves us at the same steady state as before, what is the point?\r\nThe point is that the system will react differently to changes. As an example, we will investigate the effect of an industrial fishery targeting the small pelagics in the North Sea. The North Sea model is currently set up with an effort of 0 for the industrial gear:\r\n\r\n\r\neffort <- params@initial_effort\r\neffort\r\n\r\nIndustrial    Pelagic       Beam      Otter \r\n       0.0        1.0        0.5        0.5 \r\n\r\nThe target species of the industrial gear are Sprat, Sandeel and N.pout:\r\n\r\n\r\ngear_params(params) |> filter(gear == \"Industrial\") |>\r\n    select(catchability)\r\n\r\n                    catchability\r\nSprat, Industrial              1\r\nSandeel, Industrial            1\r\nN.pout, Industrial             1\r\n\r\nWe can now turn on the industrial gear, setting its effort to 1, and see how that impacts the biomasses of the different species in the future:\r\n\r\n\r\neffort[\"Industrial\"] <- 1\r\nsim <- project(params, effort = effort, t_max = 15)\r\nplotlyBiomassRelative(sim)\r\n\r\n\r\n\r\nNot surprisingly, the target species are suffering. But there are also impacts on the other species. For example Gurnard increases by about 17%, presumably due to decreased competition with the small pelagics. It is of course these multi-species effects that we are particularly interested in being able to model in mizer. So it is important to explore how these effects are affected by the resource dynamics. So now we run exactly the same simulation but with the params object in which we had set the resource level to 0.5 while keeping exactly the same steady state.\r\n\r\n\r\nsim2 <- project(params2, effort = effort, t_max = 15)\r\nplotlyBiomassRelative(sim2)\r\n\r\n\r\n\r\nBy decreasing the resource level we have increased the competition for resource among the species. Fishing the small pelagics has decreased their biomasses and they thus consume less resource. Some species like Herring profit enormously from this.\r\nIf you want to keep the old behaviour and switch off this automatic balancing you have to add the balance = FALSE argument when calling setResource().\r\nThe arguments kappa and lambda in newMultispeciesParams() are now used to set the abundance of the resource in the steady state rather than the carrying capacity. This is in any case more useful because you may have observations about the resource abundance whereas the resource carrying capacity is unobservable.\r\nAnother addition in mizer 2.4.0 is that you can choose between semichemostat dynamics resource_semichemostat() or logistic dynamics resource_logistic(). To switch to logistc dynamics you would do\r\n\r\n\r\nparams3 <- setResource(params, \r\n                       resource_dynamics = \"resource_logistic\", \r\n                       resource_level = 0.3)\r\n\r\n\r\nYou can of course choose any value between 0 and 1 for the resource level.\r\nInvestigating resource dynamics other than semichemostat is interesting because semichemostat dynamics are particularly stable and the real world may not be as accommodating. For example in logistic dynamics, if the resource level drops below 1/2, the replenishment rate decreases as the abundance decreases, which is of course destabilising. Take a look:\r\n\r\n\r\nsim3 <- project(params3, effort = effort, t_max = 60)\r\nplotlyBiomassRelative(sim3)\r\n\r\n\r\n\r\nOf course you can also still write your own function implementing more sophisticated resource dynamics.\r\nmatchGrowth()\r\nIn the previous blog post Don’t use von Bertalanffy growth parameters, I discussed that the von Bertalanffy curves fitted to size-at-age data are not suitable for estimating the size-dependent growth rates in mizer. I therefore now recommended that instead of von Bertalanffy parameters you supply the age at maturity in the age_mat column of the species parameter data frame. Mizer will then use that to calculate a default for the maximum intake rate parameter h if you do not supply this.\r\nIn the past, whenever you changed any model parameters, you needed to re-tune other parameters to keep the growth rates in line with observations. There is now a new function matchGrowth() that automatically scales the search volume, the maximum consumption rate and the metabolic rate all by the same factor in order to achieve a growth rate that allows individuals to reach their maturity size by their maturity age while keeping the feeding level and the critical feeding level unchanged. This function does not however preserve the steady state, so you will need to also call steady() after matching the growth rates.\r\nThis allows us for example to change the feeding level without spoiling the growth rates. Let’s do an example. We double the maximum intake rate for Cod, and this of course gives it a lower feeding level:\r\n\r\n\r\nparams4 <- params\r\nspecies_params(params4)[\"Cod\", \"h\"] <- species_params(params)[\"Cod\", \"h\"] * 2\r\nplotlyFeedingLevel(params4)\r\n\r\n\r\n\r\nHowever this also spoiled the growth rate for Cod. We can fix that with matchGrowth() followed by steady().\r\n\r\n\r\nparams4 <- params4 |> matchGrowth() |> steady()\r\nplotlyFeedingLevel(params4)\r\n\r\n\r\n\r\nNormally you will want to also keep biomasses at the observed level, for which already mizer 2.3.0 provided the matchBiomasses() function. So often you will run all three in a row. So the pattern is:\r\n\r\n\r\n# make some changes to the model parameters and then find a new steady state\r\n# with the correct growth rates and abundances with\r\nparams <- params |> matchGrowth() |> matchBiomasses() |> steady()\r\n\r\n\r\nThere is of course a lot more to say. But first there is Christmas to celebrate. Even if your cultural background does not dictate that you celebrate Christmas, I hope you will have some quality time to spend with your friends and family.\r\n\r\n\r\n\r\n",
    "preview": "posts/2022-12-23-mizer-240/images/Christmas_tree_mizer.png",
    "last_modified": "2022-12-23T14:52:51+01:00",
    "input_file": {},
    "preview_width": 666,
    "preview_height": 754
  },
  {
    "path": "posts/2022-07-11-thermizer/",
    "title": "Temperature-dependent rates in mizer",
    "description": "Temperature is an important driver of ecosystem change.  Now you can include it in mizer.",
    "author": [
      {
        "name": "Phoebe Woodworth-Jefcoats",
        "url": "https://www.fisheries.noaa.gov/contact/phoebe-woodworth-jefcoats"
      }
    ],
    "date": "2022-07-11",
    "categories": [],
    "contents": "\r\n\r\nContents\r\nIntroduction\r\nAerobic\r\nscope\r\nMetabolic\r\nrate\r\n\r\nModel input\r\nA simple\r\nsimulation\r\nAdapting this for a\r\ndata-based simulation\r\nIn the works\r\nAcknowledgements\r\nUpdate note\r\nReferences\r\n\r\nIntroduction\r\ntherMizer models the effects of temperature on individuals’ aerobic\r\nscope and metabolic rate using an approach that requires minimal\r\nparameterization. This allows you to easily incorporate dynamic\r\ntemperature-dependent rates into mizer, enabling simulations to include\r\nan important climate-related driver.\r\nAerobic scope\r\nThe relationship between aerobic scope and temperature is a somewhat\r\nleft-skewed distribution with a thermal optimum and upper and lower\r\nthermal tolerance limits. Pörtner and Peck\r\n(2010) provide an overview of this relationship and Pörtner (2012) discusses\r\nopen questions related to temperature and physiology. The exact nature\r\nof the relationship between aerobic scope and temperature varies by\r\nspecies and requires a fair bit of physiological research to establish.\r\nTherefore, it is generally necessary to approximate this relationship,\r\nwhich is what therMizer does. A generic polynomial rate equation is used\r\nto approximate the effect of temperature on aerobic scope, s:\r\n\\[\\begin{align}\r\ns = T(T - T_{min})(T_{max} - T)^\\frac{1}{2} && \\text{(1)}\r\n\\end{align}\r\n\\] where T is the temperature to which a fish is exposed\r\nand \\(T_{max}\\) and \\(T_{min}\\) are the species’ upper and lower\r\nthermal tolerance limits, respectively (van der Heide et\r\nal. 2010). All temperatures in eq. (1) are in Kelvin. The result of\r\nthis expression varies considerably given a species’ thermal tolerance\r\nlimits. Therefore, it is necessary to scale this value across all\r\nmodeled species so that it equals a value ranging from 0 – 1. This is\r\ndone by dividing by the maximum value over each species’ thermal range\r\n(Woodworth-Jefcoats\r\net al. 2019). therMizer will take care of this scaling for you.\r\nThe scaled value is then used as a multiplier for encounter rate and\r\npredation rate in mizer. The scaling is applied to encounter rate as\r\nproxy for foraging movement. The resulting temperature effect is such\r\nthat when species are at their thermal optima they realize peak aerobic\r\nperformance and encounter the maximum amount of prey possible. This\r\nability diminishes to either side of the optimum and reaches zero\r\noutside species’ thermal tolerance limits. The scaling is applied to\r\npredation rate to ensure encountered prey are predated upon.\r\nMetabolic rate\r\nThe relationship between metabolic rate and temperature is\r\nexponential and positive (see, for example, Brown et al. 2004). To\r\nsimulate this, therMizer uses a Boltzmann factor or Arrhenius relation:\r\n\\[\r\n\\begin{align}\r\nr = e^{25.22-\\frac{E}{kT}} && \\text{(2)}\r\n\\end{align}\r\n\\] where r is the effect of temperature on metabolic\r\nrate, E is activation energy (0.63 eV), k is\r\nBoltzmann’s constant (\\(8.62 \\times\r\n10^{-5}\\) eV K\\(^{-1}\\)), and\r\nT is temperature in Kelvin (Brown et al. 2004, Jennings et al. 2008).\r\nThe result of this expression varies depending upon the temperature to\r\nwhich species are exposed, which is in turn a factor of species’ thermal\r\ntolerance limits. Therefore, it is necessary to scale this value across\r\nall species so that it equals a value ranging from 0 – 1. This is done\r\nby subtracting the minimum value over each species’ thermal range and\r\nthen dividing the result by the range (Woodworth-Jefcoats\r\net al. 2019). therMizer will take care of this scaling (and\r\nconverting from degrees C to Kelvin) for you when you.\r\nThe scaled value is then used as a multiplier for standard metabolism\r\nin therMizer. This has the effect of metabolism being the least\r\nexpensive when species are at the low end of their thermal tolerance and\r\nthe most expensive at the upper limits of their thermal tolerance.\r\nFinally, therMizer sets the rate scalings to 0 outside species’\r\nthermal range, simulating the assumption that species would move out of\r\nwaters that are either too warm or too cool.\r\nModel input\r\nThe only additional input you’ll need to provide, beyond what’s\r\nneeded to run mizer, are three temperature values for each species.\r\ntemp_min and temp_max represent the lower and\r\nupper bounds of a species’ thermal tolerance limits. You can find this\r\ninformation in the literature or in databases such as rfishbase (Boettiger et\r\nal. 2012). You also need to provide ocean_temp, the\r\ntemperature to which species are exposed. This can be static or dynamic,\r\nand informed from either empirical or modeled data. Temperatures are\r\ninput in degrees Celsius. therMizer will convert them to Kelvin.\r\nThat’s it. That’s all you need.\r\nA simple simulation\r\nLet’s do a simple simulation with two fictional fish species. We’ll\r\nneed to invent some parameters for them:\r\n\r\n\r\nlibrary(mizer)\r\n\r\nspecies_params <- \r\n    data.frame(species = c(\"speciesA\", \"speciesB\"), \r\n               w_inf = c(500, 5000), \r\n               k_vb = c(0.8, 0.3), \r\n               w_min = c(0.001, 0.001), \r\n               beta = c(1000,100), \r\n               sigma = c(3,3))\r\nspecies_params$interaction_resource <- c(1,0.5)\r\nparams <- newMultispeciesParams(species_params, no_w = 200, kappa = 0.0001) |> \r\n    steady(tol = 0.001)\r\n\r\n\r\nAdd their hypothetical thermal tolerance limits:\r\n\r\n\r\nspecies_params(params)$temp_min <- c(15, 10)\r\nspecies_params(params)$temp_max <- c(25, 20)\r\n\r\n\r\nAnd, finally, the temperatures to which each species is exposed. To\r\nmake it interesting, we’ll have one species eventually encounter\r\ntemperatures beyond its thermal tolerance limits.\r\n\r\n\r\n# Create temperature array and fill it\r\ntimes <- 0:500\r\nspecies <- species_params(params)$species\r\nocean_temp_array <- array(NA, dim = c(length(times), length(species)), \r\n                          dimnames = list(time = times, sp = species))\r\ntemp_inc <- 0\r\nfor (i in 1:501) {\r\n  ocean_temp_array[i,] <- c(17 + temp_inc, 17 + temp_inc)\r\n  temp_inc <- temp_inc + 0.01\r\n}\r\nother_params(params)$ocean_temp <- ocean_temp_array\r\n\r\n\r\nNow that we’ve put in all the necessary temperature information, we\r\ncan add the code that tells mizer how to use it. First, the parameters\r\nneeded to do the scaling that’s mentioned above:\r\n\r\n\r\n# Create parameter for scaling encounter and mortality rates\r\nspecies_params(params)$encounterpred_scale <- \r\n    rep(NA, nrow(species_params(params)))\r\n\r\nfor (indv in seq(1:length(species_params(params)$temp_min))) {\r\n    \r\n    # Create a vector of all temperatures each species might encounter\r\n    temperature <- seq(species_params(params)$temp_min[indv], \r\n                       species_params(params)$temp_max[indv], \r\n                       by = 0.1) + 273\r\n    \r\n    # Find the maximum value of the unscaled effect of temperature on encounter\r\n    # and predation rate for each species \r\n  species_params(params)$encounterpred_scale[indv] <- \r\n      max((temperature) * \r\n              (temperature - (species_params(params)$temp_min[indv] + 273)) *\r\n              ((species_params(params)$temp_max[indv] + 273) - temperature)^(1/2)\r\n          )\r\n}\r\n\r\n# Determine the minimum, maximum, and range of value for the effect of \r\n# temperature on metabolism\r\n    \r\nmin_metab_value <- \r\n    (exp(25.22 - (0.63/((8.62e-5)*(273 + species_params(params)$temp_min)))))\r\nmax_metab_value <- \r\n    (exp(25.22 - (0.63/((8.62e-5)*(273 + species_params(params)$temp_max)))))\r\n    \r\nspecies_params(params)$metab_min <- min_metab_value\r\nspecies_params(params)$metab_range <- max_metab_value - min_metab_value\r\n\r\n\r\nThen, we can add code to scale encounter rate and predation rate\r\nbased on the temperature at a given time step:\r\n\r\n\r\n# Calculate the temperature scaling factor for the encounter rate and \r\n# predation rate\r\nscaled_temp_effect <- function(t) {\r\n    # Using t+1 to avoid calling ocean_temp[0,] at the first time step\r\n    temp_at_t <- other_params(params)$ocean_temp[t + 1,] + 273\r\n    \r\n    # Calculate unscaled temperature effect using a generic polynomial rate equation\r\n    unscaled_temp_effect <- \r\n        temp_at_t * (temp_at_t - (species_params(params)$temp_min + 273)) * \r\n        ((species_params(params)$temp_max + 273) - temp_at_t)^(1/2)\r\n    \r\n    # Scale using new parameter\r\n    scaled_temp_effect <- \r\n        unscaled_temp_effect / species_params(params)$encounterpred_scale\r\n    \r\n    # Set temperature effect to 0 if temperatures are outside thermal \r\n    # tolerance limits\r\n    above_max <- (temp_at_t - 273) > species_params(params)$temp_max\r\n    below_min <- (temp_at_t - 273) < species_params(params)$temp_min\r\n    scaled_temp_effect[above_max | below_min] = 0\r\n    \r\n    scaled_temp_effect\r\n}\r\n\r\n\r\ntherMizerEncounter <- function(params, t, ...) {\r\n    \r\n      # Calculate maximum possible encounter rate\r\n      max_encounter <- mizerEncounter(params, t, ...)\r\n      \r\n      # Apply temperature effect\r\n      return(max_encounter * scaled_temp_effect(t))\r\n      \r\n}\r\n\r\ntherMizerPredRate <- function(params, t, ...) {\r\n      # Calculate maximum possible encounter rate\r\n      max_predrate <- mizerPredRate(params, t, ...)\r\n      \r\n      # Apply temperature effect\r\n      return(max_predrate * scaled_temp_effect(t))\r\n      \r\n}\r\n\r\n\r\nAs well as metabolic rate:\r\n\r\n\r\ntherMizerEReproAndGrowth <- function(params, t, encounter, feeding_level, ...) {\r\n    \r\n    # Using t+1 to avoid calling ocean_temp[0,] at the first time step\r\n    temp_at_t <- other_params(params)$ocean_temp[t + 1,]\r\n  \r\n    # Arrhenius equation\r\n    unscaled_temp_effect <- (exp(25.22 - (0.63/((8.62e-5)*(273 + temp_at_t)))))\r\n    \r\n    # Arrhenius equation scaled to a value between 0 and 1\r\n    temp_effect_metabolism <- \r\n        (unscaled_temp_effect - species_params(params)$metab_min) /\r\n        species_params(params)$metab_range\r\n    \r\n    # Set temperature effect to 0 if temperatures are outside thermal \r\n    # tolerance limits\r\n    above_max <- temp_at_t > species_params(params)$temp_max\r\n    below_min <- temp_at_t < species_params(params)$temp_min\r\n    temp_effect_metabolism[above_max | below_min] = 0\r\n  \r\n  # Apply scaled Arrhenius value to metabolism\r\n    sweep((1 - feeding_level) * encounter, 1,\r\n          species_params(params)$alpha, \"*\", check.margin = FALSE) - \r\n        metab(params)*temp_effect_metabolism  \r\n      \r\n}\r\n\r\n\r\nFinally, we need to replace mizer’s rate functions with our new\r\ntemperature-dependent rate functions:\r\n\r\n\r\nparams <- setRateFunction(params, \"Encounter\", \"therMizerEncounter\")\r\nparams <- setRateFunction(params, \"PredRate\", \"therMizerPredRate\")\r\nparams <- setRateFunction(params, \"EReproAndGrowth\", \"therMizerEReproAndGrowth\")\r\n\r\n\r\nLet’s see what a simulation looks like.\r\n\r\n\r\nsim <- project(params, t_max = 500, effort = 0) \r\nplot(sim)\r\n\r\n\r\n\r\nAdapting this for a\r\ndata-based simulation\r\nYou’re likely going to want to do simulations based on real species\r\nand real temperature observations or projections. This is\r\nstraightforward to do. When you prepare your species parameters, add\r\ntemp_min and temp_max columns for each\r\nspecies. You’ll also need to prepare an ocean_temp input\r\nwith dimensions that match those of time and\r\nspecies.\r\nOnce you’ve prepared your input, you can use the code above to create\r\nand use the encounterpred_scale, metab_min,\r\nand metab_range parameters and the\r\ntherMizerEncounter, therMizerPredRate, and\r\ntherMizerEReproAndGrowth rate functions.\r\nIn the works\r\nMany fish undergo ontogentic migration, spending different life\r\nstages at different depths and therefore different thermal habitats. I’m\r\nworking on adding to therMizer the capacity for different size classes\r\nto experience different temperatures.\r\nAcknowledgements\r\nThis blog post was compiled with mizer version 2.3.1 and R version\r\n4.2.1. Many thanks to Gustav Delius for guidance on mizer’s inner\r\nworkings and writing better code. Thank you also to Romain Forestier for\r\ninsight on working with temperatures below 0\\(^\\circ C\\).\r\nUpdate note\r\nPost updated on 19/09/22: The equation for aerobic scope was changed\r\nto allow users to input negative Celsius temperature. To accommodate\r\nthis, temperatures are now converted to Kelvin and the square root of\r\nthe final polynomial term is taken to preserve the curve shape.\r\nReferences\r\nBoettiger C, Lang DT, Wainwright PC. (2012) rfishbase: exploring,\r\nmanipulating, and visualizaing FishBase from R. Journal of Fish Biology\r\n81, 2030–2039. https://doi.org/10.1111/j.1095-8649.2012.03464.x\r\nBriere J-F, Pracros P, Le Roux A-Y, Pierre J-S. (1999) A novel rate\r\nmodel of temperature-dependent development in arthropods. Population\r\nEcology, 28(1): 22-29. https://doi.org/10.1093/ee/28.1.22\r\nBrown JH, Gillooly JF, Allen AP, Savage VM, West GB. (2004) Toward a\r\nmetabolic theory of ecology. Ecology, 85: 1771–1789. https://doi.org/10.1890/03-9000\r\nJennings S, Mélin F, Blanchard JL, Forster RM, Dulvy NK, Wilson RW.\r\n(2008) Global scale predictions of community and ecosystem properties\r\nfrom simple ecological theory. Proceedings of the Royal Society B, 275:\r\n1375–1383. https://doi.org/10.1098/rspb.2008.0192\r\nPörtner HO. (2012) Integrating climate-related stressor effects on\r\nmarine organisms: unifying principles linking molecule to\r\necosystem-level changes. Marine Ecology Progress Series, 470: 273–290.\r\nhttps://doi.org/10.3354/meps10123\r\nPörtner HO, Peck MA. (2010) Climate change effects on fishes and\r\nfisheries: toward a cause-and-effect understanding. Journal of Fish\r\nBiology, 77: 1745–1779. https://doi.org/10.1111/j.1095-8649.2010.02783.x\r\nvan der Heide T, Roijackers RMM, van New EH, Peeters ETHM. (2006) A\r\nsimple equation for describing the temperature dependent growth of\r\nfree-floating macrophytes. Aquatic Botany, 84: 171–175. https://doi.org/10.1016/j.aquabot.2005.09.004\r\nWoodworth-Jefcoats PA, Blanchard JL, Drazen JC. (2019) Relative\r\nImpacts of Simultaneous Stressors on a Pelagic Marine Ecosystem.\r\nFrontiers in Marine Science, 6:383. https://doi.org/10.3389/fmars.2019.00383\r\n\r\n\r\n\r\n",
    "preview": "posts/2022-07-11-thermizer/thermizer_files/figure-html5/unnamed-chunk-8-1.png",
    "last_modified": "2022-09-19T09:16:26+02:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/2021-09-07-tuning-growth-curves-with-a-shiny-gadget/",
    "title": "Tuning growth curves with a shiny gadget",
    "description": "I present to you a new shiny gadget that makes tuning a model to \nreproduce the desired growth curves feel like child's play. And\nthis is only a first glimpse of the future of interactively tuning \nmizer models.",
    "author": [
      {
        "name": "Gustav Delius",
        "url": {}
      }
    ],
    "date": "2021-09-07",
    "categories": [],
    "contents": "\r\n\r\nContents\r\nIntroduction\r\nSetting up an example\r\nHow difficult it was in the past\r\nHow easy it is now\r\nThe future\r\n\r\nIntroduction\r\nIn a previous blog post I presented a new method for tuning a mizer model to reproduce observed values for species biomasses. In the example I used there, after matching the biomasses also the growth curves had a pretty good agreement with observations. However I already warned you that that was unusual, and that you are highly unlikely to have similar luck with your own model. So in this blog post I will show you what to do if the growth curves in your model need to be adjusted.\r\nThis will give me an opportunity to introduce you to the mizer tuning gadget, which is an amazing interactive tool that eventually will be useful for much more than just matching growth curves.\r\nSetting up an example\r\nI will use the same species parameters and gear parameters for a North Sea model that I used in my previous blog post, but I will now also use the species interaction matrix NS_interaction that comes as an example with mizer, and which encodes that, due to only partial spatial overlap, not all species interact with each other with the same strength. With those parameters we can create the mizer model and make an initial plot of the steady state:\r\n\r\n\r\nparams <- newMultispeciesParams(species_params = species_params,\r\n                                gear_params = gear_params,\r\n                                interaction = NS_interaction,\r\n                                initial_effort = 1)\r\nparams <- steady(params)\r\nplotlySpectra(params, power = 2)\r\n\r\n\r\n\r\n\r\nAs discussed in that previous post, matching to the observed biomasses is easy:\r\n\r\n\r\nparams <- params |> calibrateBiomass() |> matchBiomasses() |> steady() |>\r\n    calibrateBiomass() |> matchBiomasses() |> steady() \r\nplotBiomassVsSpecies(params)\r\n\r\n\r\n\r\n\r\nThe matching did not work quite so well for Saithe, and it will become clear in a moment why that is. Let us plot the growth curves:\r\n\r\n\r\nplotGrowthCurves(params, species_panel = TRUE)\r\n\r\n\r\n\r\n\r\nIt is clear to see that the growth is too low for all species, but particularly so for Saithe.\r\n\r\n\r\nplotGrowthCurves(params, species = \"Saithe\")\r\n\r\n\r\n\r\n\r\nSaithe takes almost twice as long to reach maturity as is predicted by the von Bertalanffy growth curve. So we need to do some tuning. Before we start with that, we’ll save the current state into a new variable.\r\n\r\n\r\nparams_start <- params\r\n\r\n\r\n\r\nIf you want to try things for yourself, you can load this example MizerParams object with\r\n\r\n\r\nparams_start <- params <- readRDS(url(\"https://bit.ly/3jSNAKF\"))\r\n\r\n\r\n\r\nHow difficult it was in the past\r\nNow I am going to try to get the growth curve of Saithe in the model to agree with the observed growth curve, without using the new tuning gadget. I am doing that because it might be useful to understand what goes on under the hood in the tuning gadget. But I am also doing it to show off how much of an advance the tuning gadget represents. So let’s start.\r\nClearly we need to get Saithe to feed more rapidly. We can do that by increasing the coefficient gamma in the search volume. We don’t know how much we need to increase gamma exactly, so we try a factor of 2.\r\n\r\nIf you want to learn more about how growth is modelled in mizer, take a look at the relevant section in the mizer model description.\r\n\r\n\r\nspecies_params(params)[[\"Saithe\", \"gamma\"]] <- \r\n    2 * species_params(params)[[\"Saithe\", \"gamma\"]]\r\nplotGrowthCurves(params, species = \"Saithe\")\r\n\r\n\r\n\r\n\r\nThat helped, but is not enough. So we can try again, increasing gamma a bit further. With a little trial and error I determined that an extra factor of 1.4 would do the trick.\r\n\r\n\r\nspecies_params(params)[[\"Saithe\", \"gamma\"]] <- \r\n    1.4 * species_params(params)[[\"Saithe\", \"gamma\"]]\r\nplotGrowthCurves(params, species = \"Saithe\")\r\n\r\n\r\n\r\n\r\nUnfortunately, while we have fixed the growth curve by changing gamma, we have at the same time messed up other aspects of the model. For one thing, our initial spectra don’t represent a steady state any more. So we have to use steady() again:\r\n\r\n\r\nparams <- steady(params)\r\n\r\n\r\n\r\nNow this has allowed the full effect of multi-species interaction to take hold and, due to increased competition, the growth curve of Saithe is again trailling behind observations.\r\n\r\n\r\nplotGrowthCurves(params, species = \"Saithe\")\r\n\r\n\r\n\r\n\r\nBut not only that. We have also messed up the biomasses of some of the species, in particular Gurnard and Haddock, as it turns out:\r\n\r\n\r\nplotBiomassVsSpecies(params)\r\n\r\n\r\n\r\n\r\nOf course we know how to correct that:\r\n\r\n\r\nparams <- params |> calibrateBiomass() |> matchBiomasses() |> steady()\r\nplotBiomassVsSpecies(params)\r\n\r\n\r\n\r\n\r\nBut there is another aspects of the model that we have messed up. Let’s plot the feeding level.\r\n\r\n\r\nplotFeedingLevel(params)\r\n\r\n\r\n\r\n\r\nThe feeding level describes how satiated a fish is. The closer to 1, the more satiated the fish is and the less sensitive it therefore is to changes in prey availability. We have now made Saithe less sensitive than other species, without actually intending to do that. What we probably should have done is to change the parameter h that controls the maximum intake rate, and thus the density dependence in feeding, at the same time as gamma so as to keep the feeding level constant, at least for larvae.\r\nI think this is enough to explain what is involved in tuning a model to reproduce the desired growth curves and to demonstrate that it was a very tedious task in the past. We have only partially dealt with the growth curve of a single species and already are exhausted.\r\nHow easy it is now\r\nThe previous section showed us that tuning model parameters by hand is very tedious and it will take ages before we have the model in the shape we want it to be in. I’ll now discuss how to do it much faster. There are three things we need to do to make this faster solution possible:\r\nMake the process interactive so that we can just click around with the mouse instead of issuing long sequences of commands.\r\nIntelligently adjust several parameters at a time to avoid messing up other aspects of the model while we are trying to fit the growth curves.\r\nAutomatically recalibrate and match biomasses whenever we determine a new steady state.\r\nI would like you to try it out yourself, so please copy and paste the commands below to your RStudio console and run them.\r\nAs always we start by installing the latest version of the mizerExperimental package and loading it. The install_github() will do nothing if you already have the latest version installed. Otherwise it may prompt you to also update other packages for which there are newer versions available. You should always agree to update mizer if that is suggested.\r\n\r\n\r\nremotes::install_github(\"sizespectrum/mizerExperimental\")\r\nlibrary(mizerExperimental)\r\n\r\n\r\n\r\nNow load the un-tuned MizerParams object with\r\n\r\n\r\nparams_start <- readRDS(url(\"https://bit.ly/3jSNAKF\"))\r\n\r\n\r\n\r\nThe interactivity, intelligence and automation mentioned above are provided by the shiny gadget that you start with\r\n\r\n\r\nparams <- tuneGrowth(params_start)\r\n\r\n\r\n\r\n\r\nThe tool is called a “shiny gadget” not because it shines, but because it is realised with the R shiny package.\r\nThis will open a new tab in your browser that looks a bit like the following screenshot:\r\n\r\n\r\n\r\nThis shows two plots that are already familiar to you if you have read the previous section: the upper plot shows the growth curves and the lower plot shows the feeding levels. To the left of the plots there is a sidebar with various controls. One lets you choose which species you are currently dealing with. There is a slider to change the value of gamma. There is a button labelled “steady” that will find the steady state. So this is all very familiar.\r\nHowever there are also some unfamiliar buttons in the sidebar:\r\n“Help” opens a short tour of the user interface\r\n“Download” (icon) downloads the current MizerParams object\r\n“Return” closes the gadget and returns the current MizerParams object back to R, where with the code we used above it will then be assigned to params.\r\n“Undo”, “Redo” and “Rewind” (icons) allow you to go back to a previous steady state, go forward again, or rewind all the way back to your starting state.\r\n“previous” and “next” let you conveniently cycle through all the species.\r\nThere are some hidden features, that are however revealed in popups while you hover over elements. For example you can select a particular species quickly by clicking on its growth curve. You can switch to a single-species view by double-clicking on a species. Here is what you will get after double-clicking on “Saithe”:\r\n\r\n\r\n\r\nNow you know what to do: use the slider on the left to increase gamma. You can do that either by sliding or by clicking somewhere along the slider. You will notice that the graphs on the right immediately update. This makes it really easy to select the value you want.\r\nYou will also notice that the feeding level for the larvae remains unchanged as you change gamma. That is because the gadget automatically changes the maximum intake rate to compensate for your change in ‘gamma’.\r\nDon’t spend too much time tuning the growth curve for Saithe, because we know that the von Bertalanffy curve is also just an approximation to the true growth curve, and also because we know that things will change a bit again when you click the “steady” button. Instead use the “previous” button to go to fix the growth curve for Cod and so on.\r\nYou can also always double click on a single-species growth curve (or use the radio buttons above the plot) to go back to viewing all species at once.\r\nYou will have noticed that the main panel of the gadget has two tabs. The one we are currently viewing is called “Growth”. Clicking on “Biomass” gives us more familiar plots:\r\n\r\n\r\n\r\nThe upper plot is the plot comparing the model biomasses to the observed biomasses and the lower plot shows the size spectra. You don’t need to do anything on this tab. It is there just to reassure you that you have not messed up anything in your model. In particular, the model biomasses will match the observed biomasses very well. This is because behind the scenes the gadget calibrated and matched the biomasses each time you hit the “steady” button. If you don’t find that they agree well, then click the “steady” button now. There is never any harm in pressing the “steady” button.\r\nOnce you are happy with all your growth curves you can hit the “Return” button. Because we specified above that we wanted to assign the return value of tuneGrowth() to a variable params, you can now work further with this MizerParams object under the name params.\r\nThe future\r\nThis gadget for tuning growth curve is actually only a particular instance of a more powerful shiny gadget with many more controls and many more tabs, which allows you to adjust almost any model parameter and investigate many different aspects of you model. For example there is a tab for looking at the diets of the various species and how they change with size, a tab to look at the causes of death at various sizes, a tab to compare the size distribution of the catches in the model to observed size distributions, …\r\nI have been told that the full gadget, that you can start with\r\n\r\n\r\nparams <- tuneParams(params)\r\n\r\n\r\n\r\nis overwhelming, even though it does not yet have all the tabs and controls that I envisage. The tuneParams() function therefore allows us to just select just the bits we need for a particular task. The tuneGrowth() gadget is actually just what you get when you tell tuneParams() that you want the “growth” control and the “Growth” and “Biomass” tabs.\r\n\r\n\r\nparams <- tuneParams(params, controls = c(\"growth\"), \r\n               tabs = c(\"Growth\", \"Biomass\"))\r\n\r\n\r\n\r\nSo I think that very soon we will have a large set of targeted tools similar to tuneGrowth() to facilitate various stages of the model tuning process, but also one very powerful combined tool for those of us who like the Swiss army knife approach.\r\nNow, quite likely, when you try this with your own model you will run into problems. I am always eager to hear about those problems. Post about them in the comments or email them to me at gustav.delius@gmail.com.\r\n\r\n\r\n\r\n",
    "preview": "posts/2021-09-07-tuning-growth-curves-with-a-shiny-gadget/screenshot1.png",
    "last_modified": "2022-07-11T13:33:15+02:00",
    "input_file": {},
    "preview_width": 1337,
    "preview_height": 910
  },
  {
    "path": "posts/2021-08-20-a-5-step-recipe-for-tuning-the-model-steady-state/",
    "title": "A 5-step recipe for tuning the model steady state",
    "description": "Getting a steady state for your mizer model that agrees with observations\nis in principle a hard chicken and egg problem. I present the trick that\nmakes it surprisingly easy, with a 5-step recipe. I'll save tips on what\nto do when the recipe fails for later blog posts.",
    "author": [
      {
        "name": "Gustav Delius",
        "url": {}
      }
    ],
    "date": "2021-08-20",
    "categories": [],
    "contents": "\r\n\r\nContents\r\nWhat we want to do\r\nExample we will use\r\nWhy it is a hard problem\r\nThe constant reproduction trick\r\nSummary of the recipe\r\n\r\nWhat we want to do\r\nIn this blog post we will describe stage 2 of the process of building a mizer model. The stages are:\r\nCollect information about the important species in your ecosystem and how they are fished. This includes physiological parameters for the species as they might be found on fishbase, but also information about how abundant the species are and how they are being fished.\r\nCreate a mizer model that in its steady state reproduces the time-averaged observed state of your fish community. Of course your real system never is in a perfect steady state. It is continuously changing. There is much fluctuation from year to year. We will however assume that if we average observations over a number of years we obtain something that is close to the steady state. Without some such assumption it would be impossible for us to get started.\r\nTune the model parameters further to also reproduce time-series observations that capture some of the system’s sensitivity to perturbations, like changes in fishing pressure.\r\nThis blog post is only about the second stage. We will present a 5 step recipe for that stage. When the recipe works, it will only take a couple of minutes! So I hope you will try the recipe for your own model. Of course in practice there are all kinds of things that can (and will) go wrong. So I hope this blog post will lead to some exchange of experiences with the recipe.\r\nThe recipe is based on an important trick. I call it the constant reproduction trick. The trick is obvious once you see it, but I must admit that I struggled for a long time with mizer model building until I stumbled upon the trick.\r\nExample we will use\r\nTo make this concrete, we will consider a model for the North Sea involving 12 species. We will short-circuit stage 1 of the model-building process by basing our example on the North Sea species parameter data frame NS_species_params that comes with mizer.\r\nSome of the functions we will be using are still in active development in the mizerExperimental package. Therefore we will always want to make sure we are loading the latest version of the package with\r\n\r\n\r\nremotes::install_github(\"sizespectrum/mizerExperimental\")\r\nlibrary(mizerExperimental)\r\n\r\n\r\n\r\nThis blog post was compiled with mizer version 2.2.1.9006 and mizerExperimental version 2.2.1.9003\r\nHere is the species parameter data frame that we will be using:\r\n\r\n\r\nShow code\r\n\r\n# Here is how I obtained the example species_params:\r\nspecies_params <- NS_species_params\r\nspecies_params$R_max <- NULL\r\nspecies_params$a <- c(0.007, 0.001, 0.009, 0.002, 0.010, 0.006, 0.008, 0.004,\r\n                         0.007, 0.005, 0.005, 0.007)\r\nspecies_params$b <- c(3.014, 3.320, 2.941, 3.429, 2.986, 3.080, 3.019, 3.198,\r\n                         3.101, 3.160, 3.173, 3.075)\r\n\r\nyears <- getTimes(NS_sim) >= 1990 & getTimes(NS_sim) <= 2010\r\n# Average biomass over those 21 years\r\nbm_hist <- getBiomass(NS_sim)[years, ]\r\nspecies_params$biomass_observed <-  colSums(bm_hist) / 21\r\n\r\nlibrary(knitr)\r\nkable(species_params, row.names = FALSE)\r\n\r\n\r\nspecies\r\nw_inf\r\nw_mat\r\nbeta\r\nsigma\r\nk_vb\r\na\r\nb\r\nbiomass_observed\r\nSprat\r\n33.0\r\n13\r\n51076\r\n0.8\r\n0.681\r\n0.007\r\n3.014\r\n3.325300e+10\r\nSandeel\r\n36.0\r\n4\r\n398849\r\n1.9\r\n1.000\r\n0.001\r\n3.320\r\n1.115636e+12\r\nN.pout\r\n100.0\r\n23\r\n22\r\n1.5\r\n0.849\r\n0.009\r\n2.941\r\n3.047268e+11\r\nHerring\r\n334.0\r\n99\r\n280540\r\n3.2\r\n0.606\r\n0.002\r\n3.429\r\n4.286172e+11\r\nDab\r\n324.0\r\n21\r\n191\r\n1.9\r\n0.536\r\n0.010\r\n2.986\r\n1.723425e+10\r\nWhiting\r\n1192.0\r\n75\r\n22\r\n1.5\r\n0.323\r\n0.006\r\n3.080\r\n2.299098e+11\r\nSole\r\n866.0\r\n78\r\n381\r\n1.9\r\n0.284\r\n0.008\r\n3.019\r\n1.078201e+11\r\nGurnard\r\n668.0\r\n39\r\n283\r\n1.8\r\n0.266\r\n0.004\r\n3.198\r\n1.277013e+11\r\nPlaice\r\n2976.0\r\n105\r\n113\r\n1.6\r\n0.122\r\n0.007\r\n3.101\r\n2.197107e+12\r\nHaddock\r\n4316.5\r\n165\r\n558\r\n2.1\r\n0.271\r\n0.005\r\n3.160\r\n6.953041e+11\r\nCod\r\n39851.3\r\n1606\r\n66\r\n1.3\r\n0.216\r\n0.005\r\n3.173\r\n3.054369e+11\r\nSaithe\r\n39658.6\r\n1076\r\n40\r\n1.1\r\n0.175\r\n0.007\r\n3.075\r\n8.099535e+11\r\n\r\nFor each species we are specifying its name and some parameters characteristic of the species: its asymptotic size w_inf and maturity size w_mat, the parameters beta and sigma for its feeding kernel (we are using the default lognormal kernel for all species), the von Bertalanffy growth parameter k_vb and the parameters a and b in the allometric length-weight relationship \\(w = a l^b\\).\r\nIn addition, we also specify information that is specific to our ecosystem, namely the average abundance of each species, in the biomass_observed column. This is measured in grams. Because for the purpose of this blog post it is not important, we did not bother to look up real biomass estimates but instead we simply used the average over the years 1990 to 2010 in the simulated data in the NS_sim object included in the mizer package. You are invited to re-run the analysis with proper data.\r\nThe observed system is being fished. We need to give mizer information about how it is being fished. We do this via the gear_params data frame.\r\n\r\n\r\nShow code\r\n\r\n# Average fishing mortality\r\nf_location <- system.file(\"extdata\", \"NS_f_history.csv\", package = \"mizer\")\r\nf_history <- as(read.csv(f_location, row.names = 1), \"matrix\")[years, ]\r\nf <- colSums(f_history) / 12\r\n\r\ngear_params <- \r\n    data.frame(gear = \"All\",\r\n               species = NS_species_params$species,\r\n               sel_func = \"sigmoid_length\",\r\n               l25 =  c(7.6, 9.8, 8.7, 10.1, 11.5, 19.8, 16.4, 19.8, 11.5,\r\n                        19.1, 13.2, 35.3),\r\n               l50 = c(8.1, 11.8, 12.2, 20.8, 17.0, 29.0, 25.8, 29.0, 17.0,\r\n                       24.3, 22.9, 43.6),\r\n               catchability = f)\r\n\r\nkable(gear_params, row.names = FALSE)\r\n\r\n\r\ngear\r\nspecies\r\nsel_func\r\nl25\r\nl50\r\ncatchability\r\nAll\r\nSprat\r\nsigmoid_length\r\n7.6\r\n8.1\r\n1.3763157\r\nAll\r\nSandeel\r\nsigmoid_length\r\n9.8\r\n11.8\r\n1.3331618\r\nAll\r\nN.pout\r\nsigmoid_length\r\n8.7\r\n12.2\r\n1.3763157\r\nAll\r\nHerring\r\nsigmoid_length\r\n10.1\r\n20.8\r\n0.8626210\r\nAll\r\nDab\r\nsigmoid_length\r\n11.5\r\n17.0\r\n0.2059334\r\nAll\r\nWhiting\r\nsigmoid_length\r\n19.8\r\n29.0\r\n1.3429086\r\nAll\r\nSole\r\nsigmoid_length\r\n16.4\r\n25.8\r\n1.4424019\r\nAll\r\nGurnard\r\nsigmoid_length\r\n19.8\r\n29.0\r\n0.1342909\r\nAll\r\nPlaice\r\nsigmoid_length\r\n11.5\r\n17.0\r\n1.0296672\r\nAll\r\nHaddock\r\nsigmoid_length\r\n19.1\r\n24.3\r\n1.1690897\r\nAll\r\nCod\r\nsigmoid_length\r\n13.2\r\n22.9\r\n1.6476887\r\nAll\r\nSaithe\r\nsigmoid_length\r\n35.3\r\n43.6\r\n0.9744912\r\n\r\nWe are setting up a single gear that we call “All” which catches all species. For each species we set up the selectivity curve of the gear as a sigmoid curve with given l25 and l50 parameters. Finally we set the catchability of each species to the observed fishing mortality, averaged over the years 1990 to 2010. We will then set the fishing effort to 1, because in mizer the fishing mortality is the product of effort, catchability and selectivity.\r\nOur task now is to create a mizer model that describes species with the above characteristics and that has a steady state with the observed biomasses under the given fishing pressure.\r\nWhy it is a hard problem\r\nWe have a chicken and egg problem. The equilibrium abundance and size distributions of the fish are determined by their size-dependent growth and death rates. These rates in turn are determined by the abundance and size distribution of their prey and their predators. So we can’t determine the size distributions before we have determined the rates and we can’t determine the rates before we have determined the size distributions.\r\nBecause every species is a both prey and predator of fish of various species and sizes during their life, this is a highly coupled non-linear problem. If for example we use 100 size bins and 12 species, plus a resource spectrum, then we would have far over a thousand coupled nonlinear equations to solve simultaneously. That is not practical.\r\nRather than solving the equilibrium equations, another way to find a steady state is to simply evolve the time dynamics until the system settles down to a steady state. The problem with this approach is that the coexistence steady state of a size spectrum model has a very small region of attraction, so unless one starts with an initial state that is already very close to that coexistence steady state one will end up with extinctions.\r\nThe reason is a feedback loop: as the spawning stock biomass of a species grows, also its reproduction rate grows, leading to further growth of the spawning stock biomass and so on. Similarly as the spawning stock of another species declines, so does its reproduction rate, leading to further decline. In spite of moderating non-linear effects in the model, the general outcome is extinctions.\r\nWe can see the phenomenon in our North Sea example. If we simply run the dynamics, starting with the initial state set up by newMultispeciesParams(), first Sprat goes extinct, and Herring follows soon after. Just click the play button on the animation below.\r\n\r\n\r\nparams <- newMultispeciesParams(species_params = species_params,\r\n                                gear_params = gear_params,\r\n                                initial_effort = 1)\r\nsim <- project(params, t_max = 12)\r\nanimateSpectra(sim, power = 2)\r\n\r\n\r\n\r\n\r\nThe constant reproduction trick\r\nSo the trick is to cut the destabilising feedback loop by decoupling the reproductive rate from the spawning stock biomass. We do this by simply keeping the reproduction rate constant. The size spectrum model with constant reproduction turns out to be very stable and quickly approach a steady state, due to the smoothing effect of the feeding kernel. Once the steady state is found, we can simply adjust the reproductive efficiency of each species so that the steady state spawning stock produces the chosen reproduction rate. With that choice of the reproductive efficiency the steady state of the restricted dynamics is also the steady state of the full size spectrum model.\r\nHere is the code that does that. Run the animation that it produces by clicking the play button.\r\n\r\n\r\nparams <- newMultispeciesParams(species_params = species_params,\r\n                                gear_params = gear_params,\r\n                                initial_effort = 1)\r\n# Keep reproduction constant at the initial level\r\nparams@species_params$constant_reproduction <- getRDD(params)\r\nparams <- setReproduction(params, RDD = \"constantRDD\")\r\n# Run the dynamics with this constant reproduction\r\nsim <- project(params, t_max = 15)\r\nanimateSpectra(sim, power = 2)\r\n\r\n\r\n\r\n\r\nMizer has a function called steady() that does the same as the above code, namely run to steady state with constant reproduction and then adjust the reproduction parameters, and then sets the resulting steady state as the initial state of the MizerParams object.\r\n\r\n\r\nparams <- newMultispeciesParams(species_params = species_params,\r\n                                gear_params = gear_params,\r\n                                initial_effort = 1)\r\nparams <- steady(params)\r\nplotlySpectra(params, power = 2)\r\n\r\n\r\n\r\n\r\nWe now have a MizerParams object whose initial state is a steady state. Running a simulation starting with these initial conditions will show no change over time. For example the biomasses of all species will stay constant.\r\n\r\n\r\nsim <- project(params, t_max = 5)\r\nplotBiomass(sim)\r\n\r\n\r\n\r\n\r\nBut how do these biomasses compare to our observed biomasses?\r\n\r\n\r\nplotBiomassObservedVsModel(params)\r\n\r\n\r\n\r\n\r\nThey don’t agree at all, but that is no surprise. It would actually have been quite a coincidence if they did agree, because the newMultispeciesParams() function did not know how big our ecosystem is. It did not know that we wanted the biomasses in the entire North Sea. So initially the scale is arbitrary. The dynamics of the model are obviously independent of the scale of the system. So we have the freedom to change that scale. The calibrateBiomass() function chooses the scale so that the total biomass in the model agrees with the total observed biomass.\r\n\r\n\r\nparams <- calibrateBiomass(params) \r\nplotBiomassObservedVsModel(params)\r\n\r\n\r\n\r\n\r\nSo now the total biomass is correct, but for some species the biomass in the model is too high, for others it is too low.\r\nActually, that the size spectrum is too low for Saithe and Cod and too high for Dab and Haddock might also be suspected from the fact that they are outliers in the size-spectrum plot above. We expect in a healthy ecosystem that the total spectrum roughly follows a power law, i.e., a straight line on the log-log plot. Those species currently spoil that.\r\nSo we want to lower the spectra of the species whose biomass is too high in the model and raise those of the species whose biomass is too low. This is what the matchBiomasses() function does.\r\n\r\n\r\nparams <- matchBiomasses(params)\r\nplotlySpectra(params, power = 2, total = TRUE)\r\n\r\n\r\n\r\n\r\nIn fact, it has raised and lowered the spectra by exactly the factor needed to get the model biomasses to match the observed biomasses.\r\n\r\n\r\nplotBiomassObservedVsModel(params)\r\n\r\n\r\n\r\n\r\nOf course this is not the end of the story, because just rescaling the size spectra by constants will not again produce a steady state. All species now experience a new prey distribution and a new predator distribution, so their growth and death rates have changed. We will have to again run the dynamics to steady state.\r\n\r\n\r\nparams <- steady(params)\r\nplotBiomassObservedVsModel(params)\r\n\r\n\r\n\r\n\r\nThis has now spoiled the agreement between observed and model biomasses. But we can simply calibrate and match again and run to steady state again.\r\n\r\n\r\nparams <- params |> calibrateBiomass() |> matchBiomasses() |> steady()\r\nplotBiomassObservedVsModel(params)\r\n\r\n\r\n\r\n\r\nThe discrepancies are now quite small. We could iterate to get them even smaller:\r\n\r\n\r\nparams <- params |> calibrateBiomass() |> matchBiomasses() |> steady() |>\r\n    calibrateBiomass() |> matchBiomasses() |> steady()\r\nplotBiomassObservedVsModel(params)\r\n\r\n\r\n\r\n\r\nSo here is the picture of the steady state that matches the observed biomasses:\r\n\r\n\r\nplotlySpectra(params, power = 2)\r\n\r\n\r\n\r\n\r\nActually, even the growth rates in the steady state match the von Bertalanffy growth curves pretty well:\r\n\r\n\r\nplotGrowthCurves(params, species_panel = TRUE)\r\n\r\n\r\n\r\n\r\nBut this is a bit of a coincidence. Mizer has to choose values for the coefficient gamma of the ‘search volume’ for each species and for the coefficient ‘h’ of the maximum intake rate, both of which affect the growth rates. Because mizer has to choose them before it knows what the steady state prey distribution is for each species, it can not guarantee to choose them so as to give the correct growth rates in the steady state. You usually will have to retune them by hand. The mizerExperimental package provides a convenient shiny gadget that allows you to do that interactively, and I will talk about that in future blog posts.\r\nAlso remember that getting the steady state to agree with time-averaged observations is just the second stage in tuning a mizer model. Next you will want to tune the sensitivity to changes away from steady state. This will in particular involve tuning the density dependence in reproduction, among other things.\r\nSummary of the recipe\r\nWe have seen how to proceed if you have your species parameters and gear parameters and also have averaged observed biomasses for each species that you want the steady state of your model to match:\r\nCreate a MizerParams object from your species parameters and gear parameters with newMultispeciesParams().\r\nFind a coexistence steady state with steady().\r\nSet the scale of the model to agree with the observed total biomass with calibrateBiomass(). This does not spoil the steady state.\r\nUse matchBiomass() to move the size spectra of the species up or down to match the observed biomasses. This will spoil the steady state.\r\nGo back to step 2 to again find the steady state. Iterate steps 2, 3 and 4 as often as you like to get the steady-state biomasses to agree as precisely with your observations as you like.\r\nThere are several interesting ways in which the above recipe can fail. I’ll blog about them in the future. But it will be more fun if you share your attempt at following the above recipe with your species parameters and your observed biomasses. Email me at gustav.delius@gmail.com. I can then use your example to explain what to do when problems arise.\r\n\r\n\r\n\r\n",
    "preview": "posts/2021-08-20-a-5-step-recipe-for-tuning-the-model-steady-state/the-constant-reproduction-trick_files/figure-html5/unnamed-chunk-9-1.png",
    "last_modified": "2022-07-11T13:33:15+02:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/2021-08-14-reproducible-research-with-mizer-and-binder/",
    "title": "Reproducible research with mizer, GitHub, RPubs and binder",
    "description": "Share your code in 5 easy steps, so that others can easily reproduce your\nresults and build on your work.",
    "author": [
      {
        "name": "Gustav Delius",
        "url": {}
      }
    ],
    "date": "2021-08-14",
    "categories": [],
    "contents": "\r\n\r\nContents\r\nIntroduction\r\nPut your code into an R notebook\r\nPut your notebook on GitHub\r\nPublish your R notebook on RPubs\r\nMake it executable on mybinder.org\r\nLet the world know\r\n\r\nIntroduction\r\nThere is much benefit in sharing the code that allows others to reproduce your research. Not only does it allow others to validate your results, it also allow them to build on what you have already done. This has benefits for them, but also for you because it increases engagement with your research and advances the entire field.\r\nThe fact that you are using mizer rather than coding everything from scratch of course makes your research code much shorter and therefore much easier for others to understand and extend.\r\nIn this blog post I will share my amazement at how easy it has become to share your code. There are five easy steps:\r\nPut your code into an R notebook and add a bit of explanation.\r\nMake your R notebook together with any data files publicly available in a GitHub repository.\r\nPublish your R notebook on RPubs so people can quickly view it, nicely rendered.\r\nLaunch it on mybinder.org so that people can run your code in their browser without having to install anything.\r\nLet the world know.\r\nSteps 2, 3, 4 and 5 will only take a couple of minutes each, if one knows how to, so after reading this blog post there will be no excuse not to take those steps. Obviously step 1 can take as long as you like, depending on how nicely you like your code to be documented.\r\nI’ll talk about each step now. As an example I’ll use code for reproducing the results and figures of (Canales, Delius, and Law 2020)\r\nPut your code into an R notebook\r\nYou probably have a jumble of R script files with the code for setting up your model and running your analysis. Now that you are done, it makes sense to organise this code a bit. A nice way of doing that is to open a new R notebook (the second entry on the “New File” menu in RStudio) and pasting your code into R chunks (you create R chunks with Ctrl-Alt-I). Then in between the R chunks you can put explanations of what the code is for. The result will look something like my example\r\nIn the example I modified the header to include a table of contents and to limit the height of the figures:\r\n---\r\ntitle: \"Regulation of fish stocks without ...\"\r\noutput: \r\n  html_notebook:\r\n    toc: true\r\nfig_height: 4\r\n---\r\nYou will want to load all the libraries you need in a setup chunk like\r\n\r\n\r\nknitr::opts_chunk$set(echo = TRUE)\r\nlibrary(mizer)\r\nlibrary(magrittr)\r\nlibrary(plotly)\r\n\r\n\r\n\r\nThe first line ensures that your code in the R chunks will be included when the notebook is typeset.\r\nThe explanatory text between the R chunks is using Markdown syntax. So for example you create section headers with #, headers of subsections with ## and so on. You can include LaTeX equations with the usual syntax. So \\(x^2\\) produces the inline expression \\(x^2\\) and \\[x^2\\] produces the displayed equation \\[x^2\\] For more information see the R Markdown Reference Guide and the R Markdown Cheat Sheet, both of which are accessible via ’Help -> Cheat Sheets` in RStudio.\r\nIf you have a rather large chunk of code, it may be a good idea to split it into smaller chunks, with more explanation in between. Just put your cursor at the place where you want to split the chunk and hit ‘Ctrl-Alt-I.’\r\nThe advice is to not be too perfectionist. Just put in enough explanations so that you yourself will still be able to remember in a year’s time what you were doing. You can always add more explanations for others later if there are requests. The point is that just by having your code out there, people will be more encouraged to engage with you if they are interested.\r\nPut your notebook on GitHub\r\nI think it is fair to say that GitHub has become the most popular place to share research code. So if you do not have an account there yet, sign up for free. Then create a new repository there for sharing your notebook.\r\nIf you have not used Git and GitHub before, it will really pay off in the long run for you to put in some time familiarising yourself with them and setting things up nicely. For a short introduction I recommend the chapter on Git and GitHub in the “R packages” book. Even though the book is about developing R packages, that chapter is not restricted to that use case. For a longer introduction, I recommend Happy Git and GitHub for the useR.\r\nBut if now you are in a hurry, you can also cheat and simply upload your R notebook and your data files using the “Add file” button on your new GitHub repository.\r\nPublish your R notebook on RPubs\r\nNow that your notebook is on GitHub, it is accessible to others, but GitHub does not display the typeset version of the notebook. For that you can use RPubs, which is a free hosting site for R notebooks.\r\nRStudio makes publishing on RPubs very easy: When you click on “Preview,” RStudio will open a new window with the preview of your rendered notebook, and on that window at the top right there is a “Publish” button. Click that button and then make sure to choose “RPubs” (rather than RStudio Connect). You’ll be guided through the process.\r\nDoing that with my example notebook leads to this. Note the “Code” button at the top right of the notebook on RPubs. It allows people to conveniently download your code.\r\nMake it executable on mybinder.org\r\nNow this step I think is amazing. It allows people to play with your code without having to install anything. Take a look at what this looks like for my example. Be a bit patient — after a few seconds you will see RStudio open in your browser. Click on “plankton-anchovy.nb.html” in the File pane and select “Open in Editor.” You will now be able to execute the code chunks as well as modify them at will. In fact, you can do anything that you can do in your local RStudio.\r\nScreenshotYou have to only do three things to make this magic possible:\r\nAdd a file to you repository called “install.R” which contains only an install.packages() command for installing all the packages that your notebook needs. See my example. You will want to include at least\r\n\r\n\r\ninstall.packages(c(\"mizer\", \"knitr\", \"rmarkdown\"))\r\n\r\n\r\n\r\nbut extend the list with any other packages that you load with library() in your notebook. You can create this file straight on GitHub via the “Add file” button or you can do it locally and then push to GitHub.\r\nAdd a file to your repository called “runtime.txt” with yesterday’s date in the format r-yyyy-mm-dd. See this example This will have the effect of setting up the environment with the current version of all packages. That means that if the packages change in the future, this will not break your notebook. The reason I recommend using yesterday’s date rather than today’s is that this feature uses the MRAN snap shots and the snapshot for today may not yet be available.\r\nCreate the URL for your binder. It will have the form https://mybinder.org/v2/gh/your-github-username/your-repository-name/HEAD?urlpath=rstudio where you need to replace your-github-username/your-repository-name with your GitHub user name and repository name. For my example the URL is (https://mybinder.org/v2/gh/sizespectrum/plankton-anchovy/HEAD?urlpath=rstudio).\r\nThe first time you visit your binder URL, mybinder will take a long time to create a Docker image. When it is done, you will see an RStudio session running in your browser, with the files from your GitHub repository available in the Files pane. When people visit the URL after you they will not have to wait so long because mybinder.org will be able to use the Docker image to start the server more quickly.\r\nEach time you make a change to your GitHub repository, mybinder will rebuild the Docker image the next time someone visits the URL. To save the first visitor from a long wait, you may want to visit the URL yourself each time you push a change to your GitHub repository.\r\nLet the world know\r\nYou will probably want to put the URLs to your notebook on RPubs and to your binder into the README.md file of your GitHub repository. You will want to put the link to your GitHub repository into your published paper.\r\nAnd then you will want to let your social networks know. If you twitter about it, include @mizer_model in your post. Also, consider writing a summary of your work for this blog.\r\nLast but not least, please email mizer@sizespectrum.org. We’ll include your publication in the list of publications using mizer.\r\n\r\n\r\n\r\nCanales, T. Mariella, Gustav W. Delius, and Richard Law. 2020. “Regulation of Fish Stocks Without Stock–Recruitment Relationships: The Case of Small Pelagic Fish.” Fish and Fisheries 21 (5): 857–71. https://doi.org/10.1111/faf.12465.\r\n\r\n\r\n\r\n\r\n",
    "preview": "posts/2021-08-14-reproducible-research-with-mizer-and-binder/rstudio.png",
    "last_modified": "2022-07-11T13:33:15+02:00",
    "input_file": {},
    "preview_width": 1277,
    "preview_height": 859
  },
  {
    "path": "posts/2021-08-08-change-model-parameters-without-using/",
    "title": "Change model parameters without using @",
    "description": "Mizer provides dedicated functions for changing model parameters. Using them\nprotects you from pitfalls arising from manipulations with the `@` symbol.",
    "author": [
      {
        "name": "Gustav Delius",
        "url": {}
      }
    ],
    "date": "2021-08-08",
    "categories": [],
    "contents": "\r\n\r\nContents\r\nIntroduction\r\nSpecies parameters\r\nGear parameters\r\nResource parameters\r\nRate arrays\r\nSummary\r\n\r\nIntroduction\r\nOften, after creating a mizer model, you will want to make changes to the model parameters, either to improve the model or to investigate the effect of changes. For example you might want to study the community consequence of changes in the physiology due to warmer waters, or whatever your research question is.\r\nMizer makes this very easy. However, it is important to use the right syntax. In particular, one should avoid the use of the @ symbol, as I will explain in this blog post. So this post serves as a reminder of how one can make changes to a model after it has been created.\r\nchangeAs you will know, all the parameters describing a mizer model are contained in an object of class MizerParams. You may either have created this object yourself, for example with the newMultispeciesParams() function, or received it from a colleague. Such an object has many slots holding the various pieces of information about the model.\r\nThere are often two ways of accessing these slots. One involves the use of the @ symbol, the other uses a dedicated mizer function. If you look at the mizer code, you will see a lot of @ symbols. However I will discuss the potential pitfalls when using the @ symbol and advocate for the use of dedicated functions that mizer provides for the purpose of changing model parameters.\r\nThis blog post was written with mizer version 2.2.1.9001\r\n\r\n\r\nlibrary(mizer)\r\npackageVersion(\"mizer\")\r\n\r\n\r\n[1] '2.2.1.9001'\r\n\r\nThroughout this post we will use the NS_params MizerParams object that comes as an example with the mizer package.\r\n\r\n\r\nparams <- NS_params\r\n\r\n\r\n\r\nSpecies parameters\r\nLet’s start with the species_params data frame. This holds species-specific parameters that are used by mizer to calculate physiological rates according to specific assumptions about the size-dependence of these rates. (The details do not concern us here, but you can find all the information on the help page of species_params(). These size-dependent rates are then stored as large arrays in the slots of the MizerParams object, to be efficiently used during model projections. But also the species parameters are stored, and can therefore be used to recalculate the rates when some species parameters change.\r\nYou can get the species parameters out of a MizerParams object in two ways, both giving identical results:\r\n\r\n\r\n# Using function\r\nsp <- species_params(params)\r\n# Using @\r\nspa <- params@species_params\r\n# These are identical\r\nidentical(sp, spa)\r\n\r\n\r\n[1] TRUE\r\n\r\nThe fact that these are identical is not surprising if you look at the code for the species_params() function:\r\n\r\n\r\nspecies_params\r\n\r\n\r\nfunction(params) {\r\n    params@species_params\r\n}\r\n<bytecode: 0x55ea4c495ba8>\r\n<environment: namespace:mizer>\r\n\r\nThe function actually only contains one statement, which accesses the species_params slot using the @ notation.\r\nThe difference between the two notations becomes apparent only when you want to make a change to the species parameters. Let’s assume we want to change the h parameter for the first species in our example model. It currently has the value\r\n\r\n\r\nspecies_params(params)$h[1]\r\n\r\n\r\n[1] 18.20276\r\n\r\nAs you know, this parameter h is used to calculate the maximum intake rate \\(h(w)\\) as a power-law function of size: \\(h(w) = h w^n\\). So for example the maximum intake rate at the smallest size is\r\n\r\n\r\ngetMaxIntakeRate(params)[1, 1]\r\n\r\n\r\n[1] 0.1820276\r\n\r\nNow let’s increase the value of the h parameter using the @ notation:\r\n\r\n\r\nparams@species_params$h[1] <- 20\r\n\r\n\r\n\r\nIf we look at the maximum intake rate, we see that it has not changed:\r\n\r\n\r\ngetMaxIntakeRate(params)[1, 1]\r\n\r\n\r\n[1] 0.1820276\r\n\r\nAll we have done is change the value in the species parameter data frame, but this did not trigger a recalculation of the maximum intake rate. We should instead have used\r\n\r\n\r\nspecies_params(params)$h[1] <- 20\r\n\r\n\r\n\r\nTake a look at the syntax, which is really a bit weird when compared to other programming languages. If you want to dig deeper into this, a good place to look is https://adv-r.hadley.nz/functions.html#replacement-functions.\r\nThis way of changing \\(h\\) does indeed change the maximum intake rate:\r\n\r\n\r\ngetMaxIntakeRate(params)[1, 1]\r\n\r\n\r\n[1] 0.2\r\n\r\nThe reason is clear if we look at the code:\r\n\r\n\r\n`species_params<-`\r\n\r\n\r\nfunction(params, value) {\r\n    value <- validSpeciesParams(value)\r\n    params@species_params <- value\r\n    suppressMessages(setParams(params))\r\n}\r\n<bytecode: 0x55ea4fdb2030>\r\n<environment: namespace:mizer>\r\n\r\nSo three things actually happen when you change a species parameter via the setter function:\r\nYour new value is checked for validity\r\nYour new value is saved in the species_params slot\r\nThe other slots in the MizerParams object are updated by calling setParams().\r\nGear parameters\r\nSimilar comments apply to the gear parameters. The gear parameters are used by mizer to set up the catchability and selectivity arrays. You can find more details on the help page for setting fishing. You can get the current gear parameters in two equivalent ways:\r\n\r\n\r\n# Using function\r\ngp <- gear_params(params)\r\n# Using @\r\ngpa <- params@gear_params\r\n# These are identical\r\nidentical(gp, gpa)\r\n\r\n\r\n[1] TRUE\r\n\r\nBut if you want to actually change the selectivity or catchability by changing the gear parameters you need to use the functional form. Here is the current gear_params data frame in the example model:\r\n\r\n\r\ngear_params(params)\r\n\r\n\r\n         gear species   sel_func knife_edge_size catchability\r\n1  Industrial   Sprat knife_edge              13            1\r\n2  Industrial Sandeel knife_edge               4            1\r\n3  Industrial  N.pout knife_edge              23            1\r\n4     Pelagic Herring knife_edge              99            1\r\n5        Beam     Dab knife_edge              21            1\r\n6       Otter Whiting knife_edge              75            1\r\n7        Beam    Sole knife_edge              78            1\r\n8       Otter Gurnard knife_edge              39            1\r\n9        Beam  Plaice knife_edge             105            1\r\n10      Otter Haddock knife_edge             165            1\r\n11      Otter     Cod knife_edge            1606            1\r\n12      Otter  Saithe knife_edge            1076            1\r\n\r\nIf, for example, we want to reduce the catchability of Sprat with the Industrial gear to 0.8 we would do\r\n\r\n\r\ngear_params(params)$catchability[1] <- 0.8\r\n\r\n\r\n\r\nNote that changing gear parameters in the species_params data frame will not have the desired effect. You need to change them in the gear_params data frame.\r\nResource parameters\r\nNot surprisingly, the same applies to the resource parameters. These are used to set up the size-dependent carrying capacity and replenishment rate for the resource. You should access them with\r\n\r\n\r\nresource_params(params)\r\n\r\n\r\n$kappa\r\n[1] 1e+11\r\n\r\n$lambda\r\n[1] 2.133333\r\n\r\n$r_pp\r\n[1] 10\r\n\r\n$n\r\n[1] 0.6666667\r\n\r\n$w_pp_cutoff\r\n[1] 9.820907\r\n\r\nand change them with, for example,\r\n\r\n\r\nresource_params(params)$r_pp <- 4\r\n\r\n\r\n\r\nRate arrays\r\nWhen you call newMultispeciesParams(), then mizer uses the information in species_params, gear_params and resource_params to set up various arrays that will later make it much faster to run simulations of the model. If you are not happy with how mizer fills these arrays, you can also change them directly. And again you can do that either with @ notation or without.\r\nLet’s take the example of the maximum intake rate \\(h(w)\\) that we already discussed earlier. This is stored in the intake_max slot of the MizerParams object, as a two-dimensional array, with one row for each species and one column for each size bin. You can get at this way in the two equivalent ways:\r\n\r\n\r\nidentical(getMaxIntakeRate(params), params@intake_max)\r\n\r\n\r\n[1] TRUE\r\n\r\nYou may wonder, why the function is called getMaxIntakeRate() rather than intake_max(), and I am wondering too. Naming things is difficult, and I now think that I made a bad choice when choosing those names. It gets worse when we now look at the syntax for changing intake_max.\r\nWe can either do it with the @ notation, for example\r\n\r\n\r\nparams@intake_max <- 2 * params@intake_max\r\n\r\n\r\n\r\nor we can do it without @ notation\r\n\r\n\r\nparams <- setMaxIntakeRate(params, intake_max = 2 * getMaxIntakeRate(params))\r\n\r\n\r\n\r\nThis is ugly, and in future versions of mizer I think we will also allow\r\n\r\n\r\nintake_max(params) <- 2 * intake_max(params)\r\n\r\n\r\n\r\nBut for now we are stuck with the functions that are all listed on the [help page] for setParams(). Note that these functions do not modify the params object in place, but create a new MizerParams object, which we then have to assign to a variable.\r\nAgain there are benefits in avoiding directly accessing the slot with @. These are:\r\nThe new value you assign is checked for validity. If you make a mistake in an assignment using @ you will not get any warning and instead will run into mysterious and cryptic error messages later.\r\nThe new value gets protected from automatically being overwritten when you make changes to other parameters.\r\nWe illustrate the second point with a simple example. Let’s set one entry in the metab slot, which holds the size-dependent metabolic rates, to a particular value.\r\n\r\n\r\nparams@metab[1, 1] <- 2\r\nparams@metab[1, 1]\r\n\r\n\r\n[1] 2\r\n\r\nLet us then make a totally unrelated change, say by changing the reproductive efficiency of the 5th species and look again at our entry in metab.\r\n\r\n\r\nspecies_params(params)$erepro[5] <- 0.1\r\nparams@metab[1, 1]\r\n\r\n\r\n[1] 0.02891793\r\n\r\nThe reason for this is that the change in the species parameter has triggered a recalculation of the rate arrays from the species parameters, overwriting our manual change.\r\nNow let’s try the same with the proper way of changing the metabolic rate.\r\n\r\n\r\nmetab <- getMetabolicRate(params)\r\nmetab[1, 1] <- 2\r\nparams <- setMetabolicRate(params, metab = metab)\r\n\r\n\r\n\r\nNow this will not get overwritten when some other parameter changes.\r\n\r\n\r\nspecies_params(params)$erepro[5] <- 0.1\r\nparams@metab[1, 1]\r\n\r\n\r\n[1] 2\r\n\r\nThe way that was done internally is by attaching a comment to the metab slot.\r\n\r\n\r\ncomment(params@metab)\r\n\r\n\r\n[1] \"set manually\"\r\n\r\nYou could have chosen a more informative comment, for example\r\n\r\n\r\ncomment <- \"Just changed the [1, 1] entry for test purposes.\"\r\nparams <- setMetabolicRate(params, metab = metab,\r\n                           comment_metab = comment)\r\n\r\n\r\n\r\nAll that matters is that there is a comment. This also tells us how we can un-protect a slot so that it can be auto-computed from the species parameters again:\r\n\r\n\r\ncomment(params@metab) <- NULL\r\n\r\n\r\n\r\n\r\n\r\nspecies_params(params)$erepro[5] <- 0.1\r\nparams@metab[1, 1]\r\n\r\n\r\n[1] 0.02891793\r\n\r\nSummary\r\nWe have seen how to change species parameters, gear parameters, resource parameters or other slots in a MizerParams object by using the appropriate functions. You can find a complete list of these functions in the mizer reference pages. We discussed how this avoids the pitfalls that arise when accessing slots directly with the @ notation. I hope this will be useful to you when you explore your own mizer model.\r\nThis blog post was motivated by a question by Leslie Garay-Narváez. Please keep the questions coming.\r\n\r\n\r\n\r\n",
    "preview": "posts/2021-08-08-change-model-parameters-without-using/change.jpg",
    "last_modified": "2022-07-11T13:33:15+02:00",
    "input_file": {}
  },
  {
    "path": "posts/2021-08-03-density-dependence-in-reproduction/",
    "title": "Density-dependence in reproduction",
    "description": "The take-home message is that it is important to set the density\ndependence in your model appropriately and that with the help of the\n`setBevertonHolt()` function you can easily make changes to the density\ndependence without spoiling other aspects of your calibrated model.",
    "author": [
      {
        "name": "Gustav Delius",
        "url": {}
      }
    ],
    "date": "2021-08-03",
    "categories": [],
    "contents": "\r\n\r\nContents\r\nStock-recruitment relationship\r\nAn example model\r\nBeverton-Holt curves\r\nThe reproduction level\r\nChanging the reproduction level\r\nSensitivity to fishing\r\nMore about setBevertonHolt()\r\nTurning off density dependence\r\nSummary\r\n\r\nIn this blog post I want to discuss the purpose of the setBevertonHolt() function, which was improved in the latest version 2.2.1 of mizer to make it convenient to control the density-dependence in reproduction. We’ll introduce the new concept of the reproduction level and meet the related new function getReproductionLevel().\r\nBefore we get started we need to clarify what we mean by density dependence in reproduction in a mizer model.\r\nStock-recruitment relationship\r\nUsually, in a fisheries model, density dependence is specified via a stock-recruitment relationship, which gives a non-linear relationship between the spawning stock biomass and the recruitment. This relationship could, for example, be described by a Beverton-Holt curve. In that case for low spawning stock biomass the recruitment is assumed to be linearly proportional to the spawning stock biomass but for higher spawning stock biomass the curve flattens and asymptotically approaches a maximum recruitment rate that will never be exceeded, no matter how high the spawning stock biomass.\r\nIn a mizer model things are different because many of the causes of the density dependence in recruitment are explicitly modelled mechanistically, so don’t need to be imposed externally. These causes are:\r\nThe rate at which a spawner invests energy into reproduction depends on its food intake. So if there is a high abundance of fish and hence a lot of competition for prey, each spawner will produce fewer offspring.\r\nFish larvae are exposed to mortality from predation by larger fish. So the higher the abundance of larger fish, the higher the mortality and the fewer of the offspring will reach recruitment size.\r\nThe rate at which fish larvae grow, and hence the time they take to reach recruitment size, will depend on the availability of resources. If there are many fish larvae competing for limited resources, they will be exposed to mortality for longer, meaning fewer of them will reach recruitment size.\r\nAll these causes of density dependence are automatically taken into account in mizer, because growth depends on the abundance of prey and mortality depends on the abundance of predators. This dynamically generates fully multi-species stock-recruitment relationships.\r\nHowever, there are other causes of density dependence besides the three listed above, and these are not explicitly modelled mechanistically by mizer. An example would be the limited carrying capacity of suitable spawning grounds and other spatial effects. The way such additional density dependencies can be taken into account in a mizer model is by specifying a non-linear relationship between the energy that the spawners invest into reproduction and the number of larvae this results in. It is this extra density-dependence that we will be concerned with in this blog post.\r\nAn example model\r\nTo make things concrete in this blog post we will use the example MizerParams object NS_params, included in mizer, that describes the fish community in the North Sea. Let’s have a quick look at that MizerParams object.\r\nFirst we load the mizer package. We are using the currently latest version of mizer, version 2.2.1.\r\n\r\n\r\nlibrary(mizer)\r\npackageVersion(\"mizer\")\r\n\r\n\r\n[1] '2.2.1'\r\n\r\nA MizerParams object comes with initial size spectra for all species and the resource. Let’s plot these for the North Sea params object.\r\n\r\n\r\nparams <- NS_params\r\nplotSpectra(params, power = 2)\r\n\r\n\r\n\r\n\r\nThese initial spectra were chosen to describe a steady state of the model, meaning that if we project forward in time with constant fishing effort, the abundances stay constant. Let’s verify that.\r\n\r\n\r\nsim <- project(NS_params, t_max = 20)\r\nplotBiomass(sim)\r\n\r\n\r\n\r\n\r\nWe’ll use this model below\r\nBeverton-Holt curves\r\nBy default, mizer uses a Beverton-Holt curve to describe the relationship between the rate \\(E_R\\) at which energy is invested into reproduction and the rate \\(R\\) at which offspring are produced.\r\nTo make this concrete, we’ll look at an example. I have written a function for the purpose of this blog post called plotBevertonHolt() which we can use to look at the Beverton-Holt curve for a given species in a model.\r\n\r\n\r\nShow code\r\n\r\nlibrary(ggplot2)\r\nplotBevertonHolt <- function(params, species) {\r\n  select <- species_params(params)$species == species\r\n  erepro <- species_params(params)$erepro[select]\r\n  w0 <- params@w[params@w_min_idx[select]]\r\n  E_R_ss <- getRDI(params)[select] / erepro * 2 * w0\r\n  R_dd_ss <- getRDD(params)[select]\r\n  R_max  <- species_params(params)$R_max[select]\r\n  E_R <- seq(0, 2 * E_R_ss, length.out = 50)\r\n  R_di = erepro * E_R / 2 / w0\r\n  R_dd <- R_di / (1 + R_di / R_max)\r\n  df <- melt(data.frame(E_R, R_dd, R_di, R_max), id.vars = \"E_R\")\r\n  ggplot(df) +\r\n    geom_line(aes(x = E_R, y = value, linetype = variable)) +\r\n    geom_point(aes(x = E_R_ss, y = R_dd_ss), size = 3, color = \"red\") +\r\n    ylim(NA, 1.1 * R_max) +\r\n    ylab(\"Reproduction rate [eggs/year]\") +\r\n    xlab(\"Energy invested [g/year]\")\r\n}\r\n\r\n\r\n\r\nWe use that function to plot the Beverton-Holt curve for Gurnard in our example model\r\n\r\n\r\nplotBevertonHolt(params, \"Gurnard\")\r\n\r\n\r\n\r\n\r\nThe solid line is the Beverton-Holt curve. The horizontal dashed line shows the maximum reproduction rate that the Beverton-Holt curve approaches for large \\(E_R\\) and the dotted line shows the density-independent reproduction. The current reproduction rate is marked on the curve by a red dot. The curve shows us how the reproduction rate would change as the rate of investment into reproduction changes.\r\nThere are two parameters involved in determining this curve:\r\nThe reproductive efficiency erepro determines the slope of the curve when reproduction is low,\r\nThe maximum reproduction rate R_max determines the asymptote to which the curve levels off eventually.\r\nLet us look up the values to which the reproductive efficiency erepro and the maximal recruitment rate R_max are set for Gurnard in this example model.\r\n\r\n\r\nselect_gurnard <- species_params(params)$species == \"Gurnard\"\r\nspecies_params(params)[select_gurnard, c(\"erepro\", \"R_max\")]\r\n\r\n\r\n        erepro    R_max\r\nGurnard      1 1.65e+12\r\n\r\nThe reproduction level\r\nWe define the reproduction level as the ratio between the current reproduction rate and the maximum reproduction rate. Thus it is a number between 0 and 1. It is similar to the feeding level which in mizer is defined as the ratio between tha actual feeding rate and the maximum feeding rate.\r\nSince version 2.2.1 of mizer there is a function getReproductionLevel() for calculating the reproduction level.\r\n\r\n\r\nreproduction_level <- getReproductionLevel(params)\r\nreproduction_level\r\n\r\n\r\n     Sprat    Sandeel     N.pout    Herring        Dab    Whiting \r\n0.99074238 0.99987053 0.92829319 0.99198802 0.99578514 0.98718674 \r\n      Sole    Gurnard     Plaice    Haddock        Cod     Saithe \r\n0.99643774 0.44189813 0.08022106 0.94443443 0.99993658 0.99767830 \r\n\r\nWe see that the reproduction level of Gurnard is 0.4418981, which agrees with the height of the red dot in relation to the maximum in the above plot of the Beverton Holt curve for Gurnard.\r\nMost of the other species have unrealistically large reproduction levels, very close to 1. To see why that is bad let’s look for example at the curve for Cod:\r\n\r\n\r\nplotBevertonHolt(params, \"Cod\")\r\n\r\n\r\n\r\n\r\nThis looks so strange because the actual reproduction rate is very close to the maximum reproduction rate, so that we are very far to the right of the Beverton-Holt curve where it is almost flat. The density dependence here is so strong that an increase or decrease in the energy invested into reproduction leads to almost no change in the reproduction. In other words, the spawning stock biomass has almost no effect on the number of eggs produced. That is not realistic, so before using this model we should reduce the reproduction level.\r\nChanging the reproduction level\r\nWe could reduce the reproduction level by either reducing the reproductive efficiency erepro or by increasing R_max, but there is a subtlety. Given that the reproduction level is the ratio of the actual reproduction rate and the maximum reproduction rate R_max, we might think that doubling R_max would reduce the reproduction level by a factor of 2. Let’s check that in the example of Cod:\r\n\r\n\r\nselect_cod <- species_params(params)$species == \"Cod\"\r\nparams_changed_R_max <- params\r\nspecies_params(params_changed_R_max)$R_max[select_cod] <- \r\n    2 * species_params(params_changed_R_max)$R_max[select_cod]\r\ngetReproductionLevel(params_changed_R_max)[select_cod]\r\n\r\n\r\n      Cod \r\n0.9998732 \r\n\r\nThe reproduction level has changed very little. The reason is that besides raising the maximum reproduction, we have also changed the Beverton-Holt curve and the actual reproduction has also increased.\r\nThe other problem with changing either erepro or R_max in isolation is that we will move away from the steady state. We can see that by projecting our changed params object forward in time:\r\n\r\n\r\nsim_changed_R_max <- project(params_changed_R_max, t_max = 20)\r\nplotBiomass(sim_changed_R_max, species = \"Cod\")\r\n\r\n\r\n\r\n\r\nThis is bad news if we had carefully calibrated our model to observed biomasses for example.\r\nWhat we need to do is change both erepro and R_max at the same time in such a way that the actual reproduction does not change. This is what the function setBevertonHolt() does.\r\n\r\n\r\nparams2 <- setBevertonHolt(params, reproduction_level = c(Cod = 0.5))\r\nplotBevertonHolt(params2, \"Cod\")\r\n\r\n\r\n\r\n\r\nTo see more clearly what has happened, we extend our plotBevertonHolt() function to show both the old and the new Beverton-Holt curve in the same graph.\r\n\r\n\r\nShow code\r\n\r\nplotBevertonHolt2 <- function(params, params2, species) {\r\n  select <- species_params(params)$species == species\r\n  erepro <- species_params(params)$erepro[select]\r\n  w0 <- params@w[params@w_min_idx[select]]\r\n  E_R_ss <- getRDI(params)[select] / erepro * 2 * w0\r\n  R_dd_ss <- getRDD(params)[select]\r\n  E_R <- seq(0, 2 * E_R_ss, length.out = 50)\r\n  \r\n  R_max  <- species_params(params)$R_max[select]\r\n  R_di = erepro * E_R / 2 / w0\r\n  R_dd <- R_di / (1 + R_di / R_max)\r\n  df <- melt(data.frame(E_R, R_dd, R_di, R_max), id.vars = \"E_R\")\r\n  df$Model <- \"Model 1\"\r\n  \r\n  erepro <- species_params(params2)$erepro[select]\r\n  R_max  <- species_params(params2)$R_max[select]\r\n  R_di = erepro * E_R / 2 / w0\r\n  R_dd <- R_di / (1 + R_di / R_max)\r\n  df2 <- melt(data.frame(E_R, R_dd, R_di, R_max), id.vars = \"E_R\")\r\n  df2$Model <- \"Model 2\"\r\n  \r\n  ggplot(rbind(df, df2)) +\r\n    geom_line(aes(x = E_R, y = value, linetype = variable,\r\n                  colour = Model, size = Model)) +\r\n    geom_point(aes(x = E_R_ss, y = R_dd_ss), size = 3, color = \"red\") +\r\n    ylim(NA, 1.1 * R_max) +\r\n    ylab(\"Reproduction rate [eggs/year]\") +\r\n    xlab(\"Energy invested [g/year]\") +\r\n    labs(linetype = \"\", size = \"R_max\", colour = \"R_max\") +\r\n    scale_size_manual(values = c(0.5, 1)) +\r\n    scale_colour_manual(values = c(\"blue\", \"black\")) +\r\n    scale_linetype_manual(values = c(\"solid\", \"dashed\", \"dotted\"))\r\n}\r\n\r\n\r\n\r\n\r\n\r\nplotBevertonHolt2(params, params2, \"Cod\")\r\n\r\n\r\n\r\n\r\nThis shows that the red dot that marks the steady state value lies on both the old (blue) and the new (black) curve. This was achieved by lowering erepro at the same time as increasing R_max. The old values were\r\n\r\n\r\nspecies_params(params)[select_cod, c(\"erepro\", \"R_max\")]\r\n\r\n\r\n    erepro    R_max\r\nCod      1 8.26e+09\r\n\r\nand the new values are\r\n\r\n\r\nspecies_params(params2)[select_cod, c(\"erepro\", \"R_max\")]\r\n\r\n\r\n          erepro       R_max\r\nCod 0.0001270809 16549691091\r\n\r\nSo the change in the reproduction level has been achieved without a change to the steady state. We can verify this:\r\n\r\n\r\nsim2 <- project(params2, t_max = 20)\r\nplotBiomass(sim2)\r\n\r\n\r\n\r\n\r\nSensitivity to fishing\r\nThe reason why it matters what level of density dependence in reproduction is chosen for the model is that it affects the sensitivity of the model to perturbations, for example to changes in fishing pressure. To illustrate this we will plot the sustainable fishing yield as a function of fishing mortality.\r\nThe mizerExperimental package contains a function plotYieldVsF() that creates such a Yield versus F plot. The mizerExperimental package is updated frequently and thus it is a good idea to install the latest version\r\n\r\n\r\nremotes::install_github(\"sizespectrum/mizerExperimental\")\r\n\r\n\r\n\r\n\r\n\r\nlibrary(mizerExperimental)\r\npackageVersion(\"mizerExperimental\")\r\n\r\n\r\n[1] '2.2.1.9000'\r\n\r\nHere is the Yield versus F plot for Cod in the old model with the high reproduction level:\r\n\r\n\r\nplotYieldVsF(params, \"Cod\")\r\n\r\n\r\n\r\n\r\nThis plot shows the sustainable fishing yields at different levels of imposed fishing mortality. This is calculated by running the model with each level of fishing mortalit for long enough to reach a steady state. Then the yield in that steady state is plotted. For high fishing mortality the stock should collapse and the yield in the steady state should therefore be very low at high fishing mortalities. However in this model we see that the stock can sustain unrealistically high fishing mortalities without collapsing.\r\nFor the new model, with a reproduction level of 1/2, the curve looks more realistic:\r\n\r\n\r\nplotYieldVsF(params2, \"Cod\")\r\n\r\n\r\n\r\n\r\nIn this model at a fishing mortality of 2 per year the stock collapses completely, leading to zero yield.\r\nMore about setBevertonHolt()\r\nAs you can see from the help page of setBevertonHolt(), you can adjust the density dependence in the reproduction of several species at once. For example we can try to set the reproduction level to 1/2 for all species:\r\n\r\n\r\nparams3 <- setBevertonHolt(params, reproduction_level = 0.5)\r\n\r\n\r\nWarning in setBevertonHolt(params, reproduction_level = 0.5): The\r\nfollowing species require an unrealistic reproductive efficiency\r\ngreater than 1: Gurnard, Plaice\r\n\r\nThis gave us a warning. Let’s take a look at plaice, for example:\r\n\r\n\r\nselect_plaice <- species_params(params)$species == \"Plaice\"\r\nspecies_params(params3)[select_plaice, c(\"erepro\", \"R_max\")]\r\n\r\n\r\n         erepro        R_max\r\nPlaice 1.842465 6.556383e+13\r\n\r\nWe see that to achieve a reproduction level of 1/2 while maintaining plaice at its initial abundance, it would need a very high reproductive efficiency.\r\nLet’s see what happens if we try to force the reproductive efficiency to a more realistic level of 0.1:\r\n\r\n\r\nparams3 <- setBevertonHolt(params, erepro = c(\"Plaice\" = 0.1))\r\n\r\n\r\nWarning in setBevertonHolt(params, erepro = c(Plaice = 0.1)): For the\r\nfollowing species the requested `erepro` was too small and has been\r\nincreased to the smallest possible value: Plaice\r\n\r\n\r\n\r\nspecies_params(params3)[select_plaice, c(\"erepro\", \"R_max\")]\r\n\r\n\r\n          erepro R_max\r\nPlaice 0.9212325   Inf\r\n\r\nTo understand what is going on here we have to recall that setBevertonHolt() will not make changes that would change the abundances in the model. The level of abundance for plaice specified in the model can only be achieved with a high reproductive efficiency.\r\nIf we want to force the change in erepro we can do that but have to accept that the steady state will change:\r\n\r\n\r\nspecies_params(params3)$erepro[select_plaice] <- 0.1\r\nsim3 <- project(params3, t_max = 20)\r\nplotlyBiomass(sim3)\r\n\r\n\r\n\r\n\r\nWe see that this change also affects the abundances of the other species. I think this nicely illustrates the differences of adjusting reproduction parameters with setBevertonHolt() as opposed to changing them directly.\r\nTurning off density dependence\r\nWe can also set the reproduction level to 0.\r\n\r\n\r\nparams4 <- setBevertonHolt(params, reproduction_level = 0)\r\n\r\n\r\n\r\nThis does not mean that we have set reproduction to 0, but rather that we have turned off the density dependence in reproduction. In other words, the reproduction level is zero because we have set the maximum reproduction rate to infinity.\r\n\r\n\r\nspecies_params(params4)$R_max\r\n\r\n\r\n [1] Inf Inf Inf Inf Inf Inf Inf Inf Inf Inf Inf Inf\r\n\r\nI want to stress that the fact that we have turned off all the density dependence in reproduction does not mean that the stock-recruitment relationship is linear. All the density dependencies mentioned at the start of this blog post are still operating. We are simply not imposing any additional density dependence that is not already captured by the model.\r\nThe built-in density dependencies are enough to keep the model stable, in the sense that if we make changes to the initial abundances, after a time the system will settle down to a steady state again:\r\n\r\n\r\nparams5 <- params4\r\ninitialN(params5) <- 4 * initialN(params4)\r\nsim5 <- project(params5)\r\nplotlyBiomass(sim5)\r\n\r\n\r\n\r\n\r\nSummary\r\nWe have discussed that in the mizer model many sources of density dependence in recruitment are captured automatically but that one can take into account additional density dependence in recruitment by imposing a density dependence on the reproduction, by which we mean to impose a non-linear relation between the rate at which energy is invested into reproduction and the rate at which offspring are produced.\r\nWe looked at some Beverton-Holt curves which are used in mizer by default to encode this non-linearity. These curves are specified by two parameters: the reproductive efficiency erepro and the maximum reproduction rate R_max. The setBevertonHolt() function allows us to change both of these parameters together without changing the current reproduction rate. It only affects the behaviour of the model when it is perturbed away from the current state.\r\nTherefore the setBevertonHolt() function allows us to control the sensitivity of the model to perturbations, like changes in fishing for example, without changing the steady-state properties. This allows a two-stage approach to calibrating a mizer model: in a first step one calibrates the steady state properties to reproduce averaged observations, like growth rates and biomasses or yields of species for example. In a second step on the calibrates the sensitivity of the model, for example by matching it to time series observations.\r\n\r\n\r\n\r\n",
    "preview": "posts/2021-08-03-density-dependence-in-reproduction/density-dependence-in-reproduction_files/figure-html5/unnamed-chunk-13-1.png",
    "last_modified": "2022-07-11T13:33:15+02:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/welcome/",
    "title": "Welcome to the mizer blog",
    "description": "mizer is now 9 years old. mizer is becoming more social. Time to start a blog.",
    "author": [
      {
        "name": "Gustav Delius",
        "url": {}
      }
    ],
    "date": "2021-08-01",
    "categories": [],
    "contents": "\r\nThere is now a sizeable and diverse community of mizer users. This blog, I hope, will help keep us informed of what we are all up to and to share our experiences and our best practices.\r\nI will use this blog from time to time to explain new or less well known features of mizer. But I would like to encourage you to contribute to this blog too. Introduce us to your model or to your research. Or discuss ways in which you have extended mizer or would like to extend mizer. Or show us new ways of using mizer. All you need to do is create an R Markdown document containing your text and your code and either email it to me at mizer@sizespectrum.org or, if you are more of a GitHub wizard, create a pull request directly to the repository at (https://github.com/sizespectrum/mizerBlog).\r\nThis blog is using distill for R Markdown, which gives it some nice features. The one that I like the most is that any code blocks that you include in your post will automatically be highlighted and linked to documentation pages. For example if your R Markdown document contains a code block with\r\n\r\nlibrary(mizer)\r\nplotlySpectra(NS_params)\r\n\r\nthen what will be displayed on the blog is\r\n\r\n\r\nlibrary(mizer)\r\nplotlySpectra(NS_params)\r\n\r\n\r\n\r\n\r\nNote how the function names and package names have become links. Click on them to see what they do. If you are using packages or functions that your readers are not familiar with yet, this autolinking allows them to look them up very conveniently.\r\nUnfortunately code highlighting and autolinking currently does not work for inline code. This is due to a known bug in distill and will hopefully be fixed soon.\r\nThe output of the plotlySpectra() function is an interactive plot and this got embedded into the blog automatically. Play around with it a bit. It behaves just as it would if you viewed it in your RStudio viewer.\r\nAs the blog grows, we can start using categories to organise the posts. The distill framework provides all such standard blog features. One feature I have enabled already are comments, using the Disqus service.\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2022-07-11T13:33:15+02:00",
    "input_file": {}
  }
]
